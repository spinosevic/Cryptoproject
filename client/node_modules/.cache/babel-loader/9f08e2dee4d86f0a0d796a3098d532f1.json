{"ast":null,"code":"import _classCallCheck from \"/Users/flatironschool/flatironschool/Campus/module4/project/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/flatironschool/flatironschool/Campus/module4/project/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/flatironschool/flatironschool/Campus/module4/project/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/flatironschool/flatironschool/Campus/module4/project/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/flatironschool/flatironschool/Campus/module4/project/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/flatironschool/flatironschool/Campus/module4/project/client/src/component/Bot/Bot.js\";\nimport React from 'react';\nimport { Route, Link, Switch } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport PropTypes from 'prop-types';\nimport Form from './Form';\nimport BotParameters from './BotParameters';\nimport API from '../API';\nimport BotCss from './BotCss.css';\nimport { withStyles } from '@material-ui/core/styles';\n\nvar styles = function styles(theme) {\n  return {\n    container: {\n      display: 'flex',\n      flexWrap: 'wrap'\n    },\n    textField: {\n      marginLeft: theme.spacing.unit,\n      marginRight: theme.spacing.unit\n    },\n    dense: {\n      marginTop: 16\n    },\n    menu: {\n      width: 200\n    }\n  };\n};\n\nvar Bot =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Bot, _React$Component);\n\n  function Bot() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Bot);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Bot)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      information_submitted: false,\n      coins_balances: [],\n      bot_created: false\n    };\n\n    _this.getKeys = function () {\n      API.getKeys2().then(function (x) {\n        console.log(x);\n\n        if (!!x.api_key !== false && !!x.api_secret !== false) {\n          _this.setState({\n            information_submitted: true\n          }, _this.getCoinsfromBalances());\n        }\n      });\n    };\n\n    _this.getBots = function () {\n      API.getBots2().then(function (bots) {\n        console.log(bots.bots !== 'empty');\n\n        if (bots.bots !== 'empty') {\n          if (bots.bots[0].active) {\n            _this.setState({\n              bot_created: true\n            });\n          }\n        }\n      });\n    };\n\n    _this.getCoinsfromBalances = function () {\n      API.getBalances2().then(function (x) {\n        if (x.results !== null) {\n          var coinsArray = x.results.filter(function (y) {\n            return y.Balance !== 0;\n          });\n\n          _this.setState({\n            coins_balances: coinsArray\n          });\n        }\n      });\n    };\n\n    _this.firstSubmit = function () {\n      _this.setState({\n        information_submitted: true\n      });\n    };\n\n    _this.handleSecondSubmit = function (bot) {\n      API.buildBot2(bot).then(function (x) {\n        _this.setState({\n          bot_created: true\n        });\n      });\n    };\n\n    _this.editButton = function () {\n      _this.setState({\n        information_submitted: false\n      });\n    };\n\n    _this.stopTheBot = function () {\n      API.stopTheBot2().then(function (x) {\n        _this.setState({\n          bot_created: false\n        });\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Bot, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (!this.props.username) {\n        this.props.history.push('/');\n      }\n\n      this.getKeys();\n      this.getBots();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var classes = this.props.classes;\n      return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: \"ContentBot\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"MarginContent\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"NavBarBot\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"Button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(Link, {\n        className: \"Back\",\n        to: \"/personalpage\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \"Go Back\"))), React.createElement(\"div\", {\n        className: \"Title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, \" Create your bot is easy!\"))), React.createElement(\"div\", {\n        className: \"What-Image\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"WhatIsIt\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \"What is it?\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, \"A Cryptobot is a program that interact with the Bittrex exchange market to  perform automatic actions based on algorithm and strategy that you will decide.\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }), \"Volatility is defined as the difference between the daily maximum and minimum value, these fluctuations can represent a good opportunity for traders even in periods where the daily average values seem to be almost constant.The average daily volatility of bitcoin is almost 5%. \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }), \"To perform this kind of trading it is required a lot of commitment and time to follow the markets and perform operations at the right second! CryptoBot can perform these operations for you. Set up a bot is easy!\"), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, \"Activate the api key and api secret on Bittrex settings\"), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, \"Allow interaction with 127.0.1 IP in the IP Whitelist\"), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, \"Submit the informations here, select the coins and strategy \"), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, \"Done!\"))), React.createElement(\"div\", {\n        className: \"ImageBot\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fas fa-robot fa-1x\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"instr_bot\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"BotArea\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, this.state.information_submitted ? this.state.bot_created ? React.createElement(React.Fragment, null, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, \"Bot Created!\"), React.createElement(\"button\", {\n        onClick: function onClick() {\n          _this2.stopTheBot();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, \"Stop the bot\")) : React.createElement(React.Fragment, null, React.createElement(Button, {\n        onClick: function onClick() {\n          _this2.editButton();\n        },\n        variant: \"contained\",\n        color: \"primary\",\n        className: classes.button,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, \"Edit API info\"), React.createElement(BotParameters, {\n        handleSecondSubmit: this.handleSecondSubmit,\n        coins: this.state.coins_balances,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      })) : React.createElement(\"div\", {\n        className: \"edit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, React.createElement(Form, {\n        handleSubmit: this.firstSubmit,\n        handleSecondSubmit: this.handleSecondSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      })), \"      \"), React.createElement(\"div\", {\n        className: \"Instructions\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, \" Instructions \"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, \"Select a coin in your Bittrex wallet in the dropdown men\\xF9.\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }), \" The next field is the value in BTC of a single coin around that will activate the bot.\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }), \" Target sell/buy field percentage is the neighborhood extensionfor the bot activity. \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }), \"The Balance ratio will calculate how much of that currency balance in your Bittrex wallet you want the bot to handle.\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }), \"For Example:\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }), \"Let's assume you want the bot to handle your XRP coins.\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }), \"You want the bot to sell at every moment during the day the price goes 2% over the value of 0.00008530 BTC, and buy them again when their cost will decrease 2% from that value.\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }), \"And repeat the same actions every time these conditions will be met.\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }), \"Your balance in XPR is 5000, and you want just half of this be handled by this strategy.\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }), \"For the following case, the form should be filled in this way:\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }), \"Coin: XRP, Middle Value: 0.00008530,  Buy/Sell Percentage: 2, Balance Ratio: 0.5\"))))));\n    }\n  }]);\n\n  return Bot;\n}(React.Component);\n\nBot.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(Bot);","map":{"version":3,"sources":["/Users/flatironschool/flatironschool/Campus/module4/project/client/src/component/Bot/Bot.js"],"names":["React","Route","Link","Switch","Button","PropTypes","Form","BotParameters","API","BotCss","withStyles","styles","theme","container","display","flexWrap","textField","marginLeft","spacing","unit","marginRight","dense","marginTop","menu","width","Bot","state","information_submitted","coins_balances","bot_created","getKeys","getKeys2","then","x","console","log","api_key","api_secret","setState","getCoinsfromBalances","getBots","getBots2","bots","active","getBalances2","results","coinsArray","filter","y","Balance","firstSubmit","handleSecondSubmit","bot","buildBot2","editButton","stopTheBot","stopTheBot2","props","username","history","push","classes","button","Component","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Route, Link, Switch } from 'react-router-dom'\nimport Button from '@material-ui/core/Button';\nimport PropTypes from 'prop-types';\nimport Form from './Form'\nimport BotParameters from './BotParameters'\nimport API from '../API'\nimport BotCss from './BotCss.css'\n\n\nimport { withStyles } from '@material-ui/core/styles';\n\n\nconst styles = theme => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  textField: {\n    marginLeft: theme.spacing.unit,\n    marginRight: theme.spacing.unit,\n  },\n  dense: {\n    marginTop: 16,\n  },\n  menu: {\n    width: 200,\n  },\n});\n\nclass Bot extends React.Component{\n  state={\n    information_submitted: false,\n    coins_balances:[],\n    bot_created: false\n  }\n\n\n  componentDidMount () {\n    if(!this.props.username){\n      this.props.history.push('/')\n    }\n    this.getKeys()\n    this.getBots()\n    }\n\n    getKeys= () =>{\n      API.getKeys2()\n      .then(x=>{\n        console.log(x)\n        if(!!x.api_key!==false && !!x.api_secret!==false){\n          this.setState({\n            information_submitted: true\n          },this.getCoinsfromBalances())\n        }\n      })\n    }\n\n    getBots= () =>{\n      API.getBots2()\n      .then(bots=>{\n        console.log(bots.bots!=='empty')\n        if(bots.bots!=='empty'){\n          if(bots.bots[0].active){\n            this.setState({\n              bot_created: true\n            })\n          }\n        }\n      })\n    }\n\n    getCoinsfromBalances = () =>{\n      API.getBalances2()\n      .then(x=>{\n        if(x.results!==null){\n        let coinsArray=x.results.filter(y=>y.Balance!==0)\n        this.setState({\n          coins_balances: coinsArray\n        })\n      }})\n    }\n\n\n    firstSubmit = () =>{\n      this.setState({\n        information_submitted:true\n      })\n    }\n\n    handleSecondSubmit = (bot) =>{\n      API.buildBot2(bot)\n      .then((x)=>{\n        this.setState({\n          bot_created: true\n        })\n      })\n    }\n\n    editButton = () =>{\n      this.setState({\n        information_submitted:false\n      })\n    }\n\n    stopTheBot =()=> {\n      API.stopTheBot2()\n      .then(x=>{\n        this.setState({\n          bot_created: false\n        })\n      })\n    }\n\n  render(){\n    const { classes } = this.props;\n\n    return(\n      <>\n      <div className=\"ContentBot\">\n      <div className=\"MarginContent\">\n      <div className=\"NavBarBot\">\n      <div className=\"Button\">\n        <Link className=\"Back\" to='/personalpage'><h1>Go Back</h1></Link>\n      </div>\n      <div className=\"Title\">\n        <h1> Create your bot is easy!</h1>\n      </div>\n      </div>\n      <div className=\"What-Image\">\n      <div className=\"WhatIsIt\">\n        <h2>What is it?</h2>\n        <p>A Cryptobot is a program that interact with the Bittrex exchange market to  perform automatic actions based on algorithm and strategy that you will decide.<br/>\n         Volatility is defined as the difference between the daily maximum and minimum value, these fluctuations can represent a good opportunity for traders even in periods where the daily average values seem to be almost constant.The average daily volatility of bitcoin is almost 5%. <br/>\n          To perform this kind of trading it is required a lot of commitment and time to follow the markets and perform operations at the right second! CryptoBot can perform these operations for you. Set up a bot is easy!</p>\n        <ul>\n          <li>Activate the api key and api secret on Bittrex settings</li>\n          <li>Allow interaction with 127.0.1 IP in the IP Whitelist</li>\n          <li>Submit the informations here, select the coins and strategy </li>\n          <li>Done!</li>\n        </ul>\n      </div>\n      <div className=\"ImageBot\">\n      <i className=\"fas fa-robot fa-1x\" />\n\n      </div>\n      </div>\n      <div className=\"instr_bot\">\n\n        <div className=\"BotArea\">\n        {this.state.information_submitted?\n          (this.state.bot_created?\n            <><h2>Bot Created!</h2>\n            <button onClick={()=>{this.stopTheBot()}}>Stop the bot</button></>:\n            <>\n\n          <Button onClick={()=>{this.editButton()}} variant=\"contained\" color=\"primary\" className={classes.button}>\n                Edit API info\n          </Button>\n          <BotParameters handleSecondSubmit={this.handleSecondSubmit} coins={this.state.coins_balances}/>\n\n\n          </>):\n          <div className=\"edit\">\n          <Form handleSubmit={this.firstSubmit} handleSecondSubmit={this.handleSecondSubmit} />\n          </div>\n\n}      </div>\n<div className=\"Instructions\">\n  <h2> Instructions </h2>\n  <p>Select a coin in your Bittrex wallet in the dropdown menù.<br/> The next field is the value in BTC of a single coin around that will activate the bot.<br/> Target sell/buy field percentage is the neighborhood extensionfor the bot activity. <br/>\n  The Balance ratio will calculate how much of that currency balance in your Bittrex wallet you want the bot to handle.<br/>\n  For Example:<br/>\n  Let's assume you want the bot to handle your XRP coins.<br/>\n  You want the bot to sell at every moment during the day the price goes 2% over the value of 0.00008530 BTC, and buy them again when their cost will decrease 2% from that value.<br/>\n  And repeat the same actions every time these conditions will be met.<br />\n  Your balance in XPR is 5000, and you want just half of this be handled by this strategy.<br/>\n   For the following case, the form should be filled in this way:<br/><br/>\n   Coin: XRP, Middle Value: 0.00008530,  Buy/Sell Percentage: 2, Balance Ratio: 0.5</p>\n  </div>\n</div>\n</div>\n      </div>\n      </>)\n  }\n}\n\nBot.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\nexport default withStyles(styles)(Bot)\n"]},"metadata":{},"sourceType":"module"}