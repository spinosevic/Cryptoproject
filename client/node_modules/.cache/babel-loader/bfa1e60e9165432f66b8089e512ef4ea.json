{"ast":null,"code":"import _classCallCheck from \"/Users/flatironschool/flatironschool/Campus/module4/project/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/flatironschool/flatironschool/Campus/module4/project/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/flatironschool/flatironschool/Campus/module4/project/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/flatironschool/flatironschool/Campus/module4/project/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/flatironschool/flatironschool/Campus/module4/project/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/flatironschool/flatironschool/Campus/module4/project/client/src/component/Bot/Bot.js\";\nimport React from 'react';\nimport { Route, Link, Switch } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport PropTypes from 'prop-types';\nimport Form from './Form';\nimport BotParameters from './BotParameters';\nimport API from '../API';\nimport { withStyles } from '@material-ui/core/styles';\n\nvar styles = function styles(theme) {\n  return {\n    container: {\n      display: 'flex',\n      flexWrap: 'wrap'\n    },\n    textField: {\n      marginLeft: theme.spacing.unit,\n      marginRight: theme.spacing.unit\n    },\n    dense: {\n      marginTop: 16\n    },\n    menu: {\n      width: 200\n    }\n  };\n};\n\nvar Bot =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Bot, _React$Component);\n\n  function Bot() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Bot);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Bot)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      information_submitted: false,\n      coins_balances: [],\n      bot_created: false\n    };\n\n    _this.getKeys = function () {\n      API.getKeys2().then(function (x) {\n        console.log(x);\n\n        if (!!x.api_key !== false && !!x.api_secret !== false) {\n          _this.setState({\n            information_submitted: true\n          }, _this.getCoinsfromBalances());\n        }\n      });\n    };\n\n    _this.getBots = function () {\n      API.getBots2().then(function (bots) {\n        if (bots.bots !== '') {\n          if (bots.bots[0].active) {\n            _this.setState({\n              bot_created: true\n            });\n          }\n        }\n      });\n    };\n\n    _this.getCoinsfromBalances = function () {\n      API.getBalances2().then(function (x) {\n        var coinsArray = x.results.filter(function (y) {\n          return y.Balance !== 0;\n        });\n\n        _this.setState({\n          coins_balances: coinsArray\n        });\n      });\n    };\n\n    _this.firstSubmit = function () {\n      _this.setState({\n        information_submitted: true\n      });\n    };\n\n    _this.handleSecondSubmit = function (bot) {\n      API.buildBot2(bot).then(function (x) {\n        _this.setState({\n          bot_created: true\n        });\n      });\n    };\n\n    _this.editButton = function () {\n      _this.setState({\n        information_submitted: false\n      });\n    };\n\n    _this.stopTheBot = function () {};\n\n    return _this;\n  }\n\n  _createClass(Bot, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (!this.props.username) {\n        this.props.history.push('/');\n      }\n\n      this.getKeys();\n      this.getBots();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var classes = this.props.classes;\n      return React.createElement(React.Fragment, null, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, \" Create your bot is easy!\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, \"A Cryptobot is a program that interact with the Bittrex exchange market for you performing automatic actions based on algorithm and strategy that you will decide. At the moment the average daily volatility of bitcoin in the 2 months has been almost 4%. volatility is defined as the difference between the daily maximum and minimum value, these fluctuations can represent a good opportunity for traders even in periods where the daily average values seem to be almost constant. To perform this kind of trading it is required a lot of commitment and attention to follow the markets and perform operations at the right second! CryptoBot can perform these operations for you. Set it up a bot is easy!\"), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \"Activate the api key and api secret on Bittrex settings\"), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, \"allow interaction with 127.0.1 IP in the IP Whitelist\"), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, \"Submit the informations here, select the coins and strategy \"), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \"Done!\")), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, \" Instructions \"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, \"Select a coin in your Bittrex wallet, in the \\\"Start Value\\\" field choose the basevalue for your bot to buy the coin, in the Target/Sell Buy choose the value in percentage when you want the bot to sell or buy. The Balance Ratio will calculate how much of that currency balance you want the bot to handle. For Example: Let's assume you want the bot to buy your XRP coins every time the market goes 2% under the value of 0.25 euro, and sell it again when it increase 2%. Your balance in XPR is 50, and you want just half of this be handled by this strategy. The bot will sell the coin when it will reach the start value of 0.25 euro, and buy the same amount as soon as its cost will decrease to 0.245 euro (2%), to sell them again when their value will increase. In this case the form should be filled in this way: Coin: XRP, Start Value: 0.25,  Buy/Sell Percentage: 2%, Balance Ratio: 0.5\"), this.state.information_submitted ? this.state.bot_created ? React.createElement(React.Fragment, null, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, \"Bot Created!\"), React.createElement(\"button\", {\n        onClick: function onClick() {\n          _this2.stopTheBot();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, \"Stop the bot\")) : React.createElement(React.Fragment, null, React.createElement(Button, {\n        onClick: function onClick() {\n          _this2.editButton();\n        },\n        variant: \"contained\",\n        color: \"primary\",\n        className: classes.button,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, \"Edit API info\"), React.createElement(BotParameters, {\n        handleSecondSubmit: this.handleSecondSubmit,\n        coins: this.state.coins_balances,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      })) : React.createElement(Form, {\n        handleSubmit: this.firstSubmit,\n        handleSecondSubmit: this.handleSecondSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Bot;\n}(React.Component);\n\nBot.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(Bot);","map":{"version":3,"sources":["/Users/flatironschool/flatironschool/Campus/module4/project/client/src/component/Bot/Bot.js"],"names":["React","Route","Link","Switch","Button","PropTypes","Form","BotParameters","API","withStyles","styles","theme","container","display","flexWrap","textField","marginLeft","spacing","unit","marginRight","dense","marginTop","menu","width","Bot","state","information_submitted","coins_balances","bot_created","getKeys","getKeys2","then","x","console","log","api_key","api_secret","setState","getCoinsfromBalances","getBots","getBots2","bots","active","getBalances2","coinsArray","results","filter","y","Balance","firstSubmit","handleSecondSubmit","bot","buildBot2","editButton","stopTheBot","props","username","history","push","classes","button","Component","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Route, Link, Switch } from 'react-router-dom'\nimport Button from '@material-ui/core/Button';\nimport PropTypes from 'prop-types';\nimport Form from './Form'\nimport BotParameters from './BotParameters'\nimport API from '../API'\n\nimport { withStyles } from '@material-ui/core/styles';\n\n\nconst styles = theme => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  textField: {\n    marginLeft: theme.spacing.unit,\n    marginRight: theme.spacing.unit,\n  },\n  dense: {\n    marginTop: 16,\n  },\n  menu: {\n    width: 200,\n  },\n});\n\nclass Bot extends React.Component{\n  state={\n    information_submitted: false,\n    coins_balances:[],\n    bot_created: false\n  }\n\n\n  componentDidMount () {\n    if(!this.props.username){\n      this.props.history.push('/')\n    }\n    this.getKeys()\n    this.getBots()\n    }\n\n    getKeys= () =>{\n      API.getKeys2()\n      .then(x=>{\n        console.log(x)\n        if(!!x.api_key!==false && !!x.api_secret!==false){\n          this.setState({\n            information_submitted: true\n          },this.getCoinsfromBalances())\n        }\n      })\n    }\n\n    getBots= () =>{\n      API.getBots2()\n      .then(bots=>{\n\n        if(bots.bots!==''){\n          if(bots.bots[0].active){\n            this.setState({\n              bot_created: true\n            })\n          }\n        }\n      })\n    }\n\n    getCoinsfromBalances = () =>{\n      API.getBalances2()\n      .then(x=>{\n\n        let coinsArray=x.results.filter(y=>y.Balance!==0)\n        this.setState({\n          coins_balances: coinsArray\n        })\n        })\n    }\n\n\n    firstSubmit = () =>{\n      this.setState({\n        information_submitted:true\n      })\n    }\n\n    handleSecondSubmit = (bot) =>{\n      API.buildBot2(bot)\n      .then((x)=>{\n        this.setState({\n          bot_created: true\n        })\n      })\n    }\n\n    editButton = () =>{\n      this.setState({\n        information_submitted:false\n      })\n    }\n\n    stopTheBot =()=> {\n      \n    }\n\n  render(){\n    const { classes } = this.props;\n\n    return(\n      <>\n        <h1> Create your bot is easy!</h1>\n        <p>A Cryptobot is a program that interact with the Bittrex exchange market for you performing automatic actions based on algorithm and strategy that you will decide. At the moment the average daily volatility of bitcoin in the 2 months has been almost 4%. volatility is defined as the difference between the daily maximum and minimum value, these fluctuations can represent a good opportunity for traders even in periods where the daily average values seem to be almost constant. To perform this kind of trading it is required a lot of commitment and attention to follow the markets and perform operations at the right second! CryptoBot can perform these operations for you. Set it up a bot is easy!</p>\n        <ul>\n          <li>Activate the api key and api secret on Bittrex settings</li>\n          <li>allow interaction with 127.0.1 IP in the IP Whitelist</li>\n          <li>Submit the informations here, select the coins and strategy </li>\n          <li>Done!</li>\n        </ul>\n        <h2> Instructions </h2>\n        <p>Select a coin in your Bittrex wallet, in the \"Start Value\" field choose the basevalue for your bot to buy the coin, in the Target/Sell Buy choose the value in percentage when you want the bot to sell or buy. The Balance Ratio will calculate how much of that currency balance you want the bot to handle.\n        For Example:\n        Let's assume you want the bot to buy your XRP coins every time the market goes 2% under the value of 0.25 euro, and sell it again when it increase 2%. Your balance in XPR is 50, and you want just half of this be handled by this strategy.\n         The bot will sell the coin when it will reach the start value of 0.25 euro, and buy the same amount as soon as its cost will decrease to 0.245 euro (2%), to sell them again when their value will increase.\n         In this case the form should be filled in this way:\n         Coin: XRP, Start Value: 0.25,  Buy/Sell Percentage: 2%, Balance Ratio: 0.5</p>\n        {this.state.information_submitted?\n          (this.state.bot_created?\n            <><h2>Bot Created!</h2>\n            <button onClick={()=>{this.stopTheBot()}}>Stop the bot</button></>:\n            <>\n          <Button onClick={()=>{this.editButton()}} variant=\"contained\" color=\"primary\" className={classes.button}>\n                Edit API info\n          </Button>\n          <BotParameters handleSecondSubmit={this.handleSecondSubmit} coins={this.state.coins_balances}/>\n          </>):\n          <Form handleSubmit={this.firstSubmit} handleSecondSubmit={this.handleSecondSubmit} />\n}\n      </>)\n  }\n}\n\nBot.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\nexport default withStyles(styles)(Bot)\n"]},"metadata":{},"sourceType":"module"}